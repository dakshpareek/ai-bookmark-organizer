var content=function(){"use strict";var _=Object.defineProperty;var M=(g,l,w)=>l in g?_(g,l,{enumerable:!0,configurable:!0,writable:!0,value:w}):g[l]=w;var f=(g,l,w)=>M(g,typeof l!="symbol"?l+"":l,w);var A,N;function g(t){return t}const l=((N=(A=globalThis.browser)==null?void 0:A.runtime)==null?void 0:N.id)==null?globalThis.chrome:globalThis.browser,w={matches:["*://*/*"],main(){console.log("Content script loaded.");let t=null;const o=1e3,e=10;l.runtime.onMessage.addListener((s,h,i)=>{if(s.action==="categorizeBookmarkBatchAI"){const{titles:a,urls:d}=s.data;return m(a,d).then(n=>{i({success:!0,categories:n})}).catch(n=>{console.error("Error in categorizeBookmarksAI:",n),i({success:!1,error:n.message})}),!0}else if(s.action==="categorizeBookmarkAI"){const{title:a,url:d}=s.data;return r(a,d).then(n=>{i({success:!0,category:n})}).catch(n=>{console.error("Error in categorizeBookmarkAI:",n),i({success:!1,error:n.message})}),!0}});async function r(s,h){if(!window.ai||!window.ai.languageModel)throw new Error("AI capabilities are not available in this context.");try{t||(t=await c()),t.tokensLeft<o&&(console.log("Session tokens exhausted. Creating a new session."),t.destroy(),t=await c());const i=`
          Categorize the following into a single, one-word category based on your guess about the category.

          Title: "${s}"
          URL: "${h}"

          Provide only one word as the category (e.g., News, Sports, Technology) in English. Do not include any additional text, explanations, or formatting.
        `;let a=0,d;for(;a<e;){a++;try{return d=await t.prompt(i),console.log(`${t.tokensSoFar}/${t.maxTokens} tokens used in session. ${t.tokensLeft} tokens left.`),d.trim()}catch(n){if(console.error(`Attempt ${a} failed:`,n),a>=e)throw new Error(`Failed to categorize bookmark after ${e} attempts.`);await new Promise(u=>setTimeout(u,500))}}throw new Error("Unable to categorize bookmark after multiple attempts.")}catch(i){throw console.error("Error during AI categorization:",i),i}}async function c(){const{available:s,defaultTemperature:h,defaultTopK:i}=await window.ai.languageModel.capabilities();if(s!=="no"){const a=await window.ai.languageModel.create({systemPrompt:"You are an assistant that categorizes bookmarks into appropriate categories.",temperature:h,topK:i});return console.log("New AI session created."),a}else throw new Error("AI model is not available.")}async function m(s,h){if(!window.ai||!window.ai.languageModel)throw new Error("AI capabilities are not available in this context.");try{t||(t=await c()),t.tokensLeft<o&&(console.log("Session tokens exhausted. Creating a new session."),t.destroy(),t=await c());const i=`
          You are an assistant that categorizes bookmarks into single-word categories. Respond with one category for each bookmark. Only One.

          For each of the following bookmarks, assign a category to it.

          Please follow these instructions carefully:
          - Respond with one category for each bookmark. Only One.
          - Format your response as "Bookmark [number]: [Category]", one per line.
          - Do not include any additional text, explanations, or formatting.
          - Strictly follow output format.

          Example response:

          Bookmark 1: Technology

          Here are the bookmarks:

          ${s.map((n,u)=>`Bookmark ${u+1}:

                Title: "${n}"

                URL: "${h[u]}"
`).join(`
`)}

          Please provide the categories now.
        `;let a=0,d;for(;a<e;){a++;try{d=await t.prompt(i),console.log("*************"),console.log(d),console.log("*************"),console.log(`${t.tokensSoFar}/${t.maxTokens} tokens used in session. ${t.tokensLeft} tokens left.`);const n=d.trim().split(`
`).filter(v=>v.trim()!==""),u=[];for(const v of n){const y=v.trim().match(/^Bookmark\s+\d+:\s+(.+)$/i);y&&y[1]&&u.push(y[1])}if(u.length!==s.length)throw new Error("Mismatch between number of categories and bookmarks.");return u}catch(n){if(console.error(`Attempt ${a} failed:`,n),a>=e)throw new Error(`Failed to categorize bookmarks after ${e} attempts.`);await new Promise(u=>setTimeout(u,500))}}throw new Error("Unable to categorize bookmarks after multiple attempts.")}catch(i){throw console.error("Error during AI batch categorization:",i),i}}}};function k(t,...o){}const $={debug:(...t)=>k(console.debug,...t),log:(...t)=>k(console.log,...t),warn:(...t)=>k(console.warn,...t),error:(...t)=>k(console.error,...t)},R={BASE_URL:"/",BROWSER:"chrome",CHROME:!0,COMMAND:"build",DEV:!1,EDGE:!1,ENTRYPOINT:"content",FIREFOX:!1,MANIFEST_VERSION:3,MODE:"production",OPERA:!1,PROD:!0,SAFARI:!1,SSR:!1,VITE_CJS_IGNORE_WARNING:"true"},b=class b extends Event{constructor(o,e){super(b.EVENT_NAME,{}),this.newUrl=o,this.oldUrl=e}};f(b,"EVENT_NAME",T("wxt:locationchange"));let I=b;function T(t){var e;const o=typeof R>"u"?"build":"content";return`${(e=l==null?void 0:l.runtime)==null?void 0:e.id}:${o}:${t}`}function F(t){let o,e;return{run(){o==null&&(e=new URL(location.href),o=t.setInterval(()=>{let r=new URL(location.href);r.href!==e.href&&(window.dispatchEvent(new I(r,e)),e=r)},1e3))}}}const p=class p{constructor(o,e){f(this,"isTopFrame",window.self===window.top);f(this,"abortController");f(this,"locationWatcher",F(this));this.contentScriptName=o,this.options=e,this.abortController=new AbortController,this.isTopFrame?(this.listenForNewerScripts({ignoreFirstEvent:!0}),this.stopOldScripts()):this.listenForNewerScripts()}get signal(){return this.abortController.signal}abort(o){return this.abortController.abort(o)}get isInvalid(){return l.runtime.id==null&&this.notifyInvalidated(),this.signal.aborted}get isValid(){return!this.isInvalid}onInvalidated(o){return this.signal.addEventListener("abort",o),()=>this.signal.removeEventListener("abort",o)}block(){return new Promise(()=>{})}setInterval(o,e){const r=setInterval(()=>{this.isValid&&o()},e);return this.onInvalidated(()=>clearInterval(r)),r}setTimeout(o,e){const r=setTimeout(()=>{this.isValid&&o()},e);return this.onInvalidated(()=>clearTimeout(r)),r}requestAnimationFrame(o){const e=requestAnimationFrame((...r)=>{this.isValid&&o(...r)});return this.onInvalidated(()=>cancelAnimationFrame(e)),e}requestIdleCallback(o,e){const r=requestIdleCallback((...c)=>{this.signal.aborted||o(...c)},e);return this.onInvalidated(()=>cancelIdleCallback(r)),r}addEventListener(o,e,r,c){var m;e==="wxt:locationchange"&&this.isValid&&this.locationWatcher.run(),(m=o.addEventListener)==null||m.call(o,e.startsWith("wxt:")?T(e):e,r,{...c,signal:this.signal})}notifyInvalidated(){this.abort("Content script context invalidated"),$.debug(`Content script "${this.contentScriptName}" context invalidated`)}stopOldScripts(){window.postMessage({type:p.SCRIPT_STARTED_MESSAGE_TYPE,contentScriptName:this.contentScriptName},"*")}listenForNewerScripts(o){let e=!0;const r=c=>{var m,s;if(((m=c.data)==null?void 0:m.type)===p.SCRIPT_STARTED_MESSAGE_TYPE&&((s=c.data)==null?void 0:s.contentScriptName)===this.contentScriptName){const h=e;if(e=!1,h&&(o!=null&&o.ignoreFirstEvent))return;this.notifyInvalidated()}};addEventListener("message",r),this.onInvalidated(()=>removeEventListener("message",r))}};f(p,"SCRIPT_STARTED_MESSAGE_TYPE",T("wxt:content-script-started"));let S=p;function P(){}function E(t,...o){}const x={debug:(...t)=>E(console.debug,...t),log:(...t)=>E(console.log,...t),warn:(...t)=>E(console.warn,...t),error:(...t)=>E(console.error,...t)};return(async()=>{try{const{main:t,...o}=w,e=new S("content",o);return await t(e)}catch(t){throw x.error('The content script "content" crashed on startup!',t),t}})()}();
content;
